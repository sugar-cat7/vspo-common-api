// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sugar-cat7/vspo-common-api/domain/services (interfaces: SongService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sugar-cat7/vspo-common-api/domain/entities"
)

// MockSongService is a mock of SongService interface.
type MockSongService struct {
	ctrl     *gomock.Controller
	recorder *MockSongServiceMockRecorder
}

// MockSongServiceMockRecorder is the mock recorder for MockSongService.
type MockSongServiceMockRecorder struct {
	mock *MockSongService
}

// NewMockSongService creates a new mock instance.
func NewMockSongService(ctrl *gomock.Controller) *MockSongService {
	mock := &MockSongService{ctrl: ctrl}
	mock.recorder = &MockSongServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongService) EXPECT() *MockSongServiceMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockSongService) CreateSong(arg0 *entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockSongServiceMockRecorder) CreateSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockSongService)(nil).CreateSong), arg0)
}

// CreateSongsInBatch mocks base method.
func (m *MockSongService) CreateSongsInBatch(arg0 []*entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSongsInBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSongsInBatch indicates an expected call of CreateSongsInBatch.
func (mr *MockSongServiceMockRecorder) CreateSongsInBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSongsInBatch", reflect.TypeOf((*MockSongService)(nil).CreateSongsInBatch), arg0)
}

// DeleteSong mocks base method.
func (m *MockSongService) DeleteSong(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockSongServiceMockRecorder) DeleteSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockSongService)(nil).DeleteSong), arg0)
}

// GetAllSongs mocks base method.
func (m *MockSongService) GetAllSongs() ([]*entities.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSongs")
	ret0, _ := ret[0].([]*entities.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSongs indicates an expected call of GetAllSongs.
func (mr *MockSongServiceMockRecorder) GetAllSongs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSongs", reflect.TypeOf((*MockSongService)(nil).GetAllSongs))
}

// GetSongByID mocks base method.
func (m *MockSongService) GetSongByID(arg0 string) (*entities.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByID", arg0)
	ret0, _ := ret[0].(*entities.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongByID indicates an expected call of GetSongByID.
func (mr *MockSongServiceMockRecorder) GetSongByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByID", reflect.TypeOf((*MockSongService)(nil).GetSongByID), arg0)
}

// GetSongIDs mocks base method.
func (m *MockSongService) GetSongIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongIDs indicates an expected call of GetSongIDs.
func (mr *MockSongServiceMockRecorder) GetSongIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongIDs", reflect.TypeOf((*MockSongService)(nil).GetSongIDs))
}

// UpdateSong mocks base method.
func (m *MockSongService) UpdateSong(arg0 *entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockSongServiceMockRecorder) UpdateSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockSongService)(nil).UpdateSong), arg0)
}

// UpdateSongsInBatch mocks base method.
func (m *MockSongService) UpdateSongsInBatch(arg0 []*entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSongsInBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSongsInBatch indicates an expected call of UpdateSongsInBatch.
func (mr *MockSongServiceMockRecorder) UpdateSongsInBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSongsInBatch", reflect.TypeOf((*MockSongService)(nil).UpdateSongsInBatch), arg0)
}
