// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	handlers2 "github.com/sugar-cat7/vspo-common-api/app/http/handlers/channels"
	"github.com/sugar-cat7/vspo-common-api/app/http/handlers/songs"
	"github.com/sugar-cat7/vspo-common-api/domain/services"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/firestore"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/youtube"
	usecases2 "github.com/sugar-cat7/vspo-common-api/usecases/channel"
	"github.com/sugar-cat7/vspo-common-api/usecases/song"
)

// Injectors from wire.go:

// InitializeApplication initializes the entire application with all its dependencies using wire.
func InitializeApplication() (*Application, func(), error) {
	firestoreClient, err := firestore.ProvideFirestoreClient()
	if err != nil {
		return nil, nil, err
	}
	songRepository := firestore.NewSongRepository(firestoreClient)
	repositoriesSongRepository := firestore.ProvideSongRepository(firestoreClient, songRepository)
	songService := services.NewSongService(repositoriesSongRepository)
	getAllSongs := usecases.NewGetAllSongs(songService)
	getAllSongsHandler := handlers.NewGetAllSongsHandler(getAllSongs)
	client := youtube.ProvideHTTPClient()
	youTubeService := services.NewYouTubeService(client)
	createSong := usecases.NewCreateSong(youTubeService, songService)
	createSongHandler := handlers.NewCreateSongHandler(createSong)
	updateSongsFromYoutube := usecases.NewUpdateSongsFromYoutube(youTubeService, songService)
	updateSongsFromYoutubeHandler := handlers.NewUpdateSongsFromYoutubeHandler(updateSongsFromYoutube)
	channelRepository := firestore.NewChannelRepository(firestoreClient)
	repositoriesChannelRepository := firestore.ProvideChannelRepository(firestoreClient, channelRepository)
	channelService := services.NewChannelService(repositoriesChannelRepository)
	getChannels := usecases2.NewGetChannels(channelService)
	getChannelsHandler := handlers2.NewGetChannelsHandler(getChannels)
	createChannel := usecases2.NewCreateChannel(youTubeService, channelService)
	createChannelHandler := handlers2.NewCreateChannelHandler(createChannel)
	updateChannelsFromYoutube := usecases2.NewUpdateChannelsFromYoutube(youTubeService, channelService)
	updateChannelsFromYoutubeHandler := handlers2.NewUpdateChannelsFromYoutubeHandler(updateChannelsFromYoutube)
	application := NewApplication(getAllSongsHandler, createSongHandler, updateSongsFromYoutubeHandler, getChannelsHandler, createChannelHandler, updateChannelsFromYoutubeHandler)
	return application, func() {
	}, nil
}

// wire.go:

// Application is the main application struct which holds all the dependencies together.
type Application struct {
	GetAllSongsHandler               *handlers.GetAllSongsHandler
	CreateSongHandler                *handlers.CreateSongHandler
	UpdateSongsFromYoutubeHandler    *handlers.UpdateSongsFromYoutubeHandler
	GetChannelsHandler               *handlers2.GetChannelsHandler
	CreateChannelHandler             *handlers2.CreateChannelHandler
	UpdateChannelsFromYoutubeHandler *handlers2.UpdateChannelsFromYoutubeHandler
}

// NewApplication creates a new Application.
func NewApplication(getAllSongsHandler *handlers.GetAllSongsHandler, createSongHandler *handlers.CreateSongHandler, updateSongsFromYoutubeHandler *handlers.UpdateSongsFromYoutubeHandler,
	getChannelsHandler *handlers2.GetChannelsHandler, createChannelHandler *handlers2.CreateChannelHandler, updateChannelsFromYoutubeHandler *handlers2.UpdateChannelsFromYoutubeHandler,
) *Application {
	return &Application{
		GetAllSongsHandler:               getAllSongsHandler,
		CreateSongHandler:                createSongHandler,
		UpdateSongsFromYoutubeHandler:    updateSongsFromYoutubeHandler,
		GetChannelsHandler:               getChannelsHandler,
		CreateChannelHandler:             createChannelHandler,
		UpdateChannelsFromYoutubeHandler: updateChannelsFromYoutubeHandler,
	}
}
