// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sugar-cat7/vspo-common-api/domain/services (interfaces: ChannelService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sugar-cat7/vspo-common-api/domain/entities"
)

// MockChannelService is a mock of ChannelService interface.
type MockChannelService struct {
	ctrl     *gomock.Controller
	recorder *MockChannelServiceMockRecorder
}

// MockChannelServiceMockRecorder is the mock recorder for MockChannelService.
type MockChannelServiceMockRecorder struct {
	mock *MockChannelService
}

// NewMockChannelService creates a new mock instance.
func NewMockChannelService(ctrl *gomock.Controller) *MockChannelService {
	mock := &MockChannelService{ctrl: ctrl}
	mock.recorder = &MockChannelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelService) EXPECT() *MockChannelServiceMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelService) CreateChannel(arg0 *entities.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelServiceMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelService)(nil).CreateChannel), arg0)
}

// CreateChannelsInBatch mocks base method.
func (m *MockChannelService) CreateChannelsInBatch(arg0 []*entities.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelsInBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChannelsInBatch indicates an expected call of CreateChannelsInBatch.
func (mr *MockChannelServiceMockRecorder) CreateChannelsInBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelsInBatch", reflect.TypeOf((*MockChannelService)(nil).CreateChannelsInBatch), arg0)
}

// DeleteChannel mocks base method.
func (m *MockChannelService) DeleteChannel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelServiceMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelService)(nil).DeleteChannel), arg0)
}

// GetAllChannels mocks base method.
func (m *MockChannelService) GetAllChannels() ([]*entities.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannels")
	ret0, _ := ret[0].([]*entities.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChannels indicates an expected call of GetAllChannels.
func (mr *MockChannelServiceMockRecorder) GetAllChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannels", reflect.TypeOf((*MockChannelService)(nil).GetAllChannels))
}

// GetChannelByID mocks base method.
func (m *MockChannelService) GetChannelByID(arg0 string) (*entities.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByID", arg0)
	ret0, _ := ret[0].(*entities.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByID indicates an expected call of GetChannelByID.
func (mr *MockChannelServiceMockRecorder) GetChannelByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByID", reflect.TypeOf((*MockChannelService)(nil).GetChannelByID), arg0)
}

// GetChannelIDs mocks base method.
func (m *MockChannelService) GetChannelIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelIDs indicates an expected call of GetChannelIDs.
func (mr *MockChannelServiceMockRecorder) GetChannelIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelIDs", reflect.TypeOf((*MockChannelService)(nil).GetChannelIDs))
}

// GetChannels mocks base method.
func (m *MockChannelService) GetChannels(arg0 []string) ([]*entities.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannels", arg0)
	ret0, _ := ret[0].([]*entities.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels.
func (mr *MockChannelServiceMockRecorder) GetChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockChannelService)(nil).GetChannels), arg0)
}

// UpdateChannel mocks base method.
func (m *MockChannelService) UpdateChannel(arg0 *entities.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockChannelServiceMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChannelService)(nil).UpdateChannel), arg0)
}

// UpdateChannelsInBatch mocks base method.
func (m *MockChannelService) UpdateChannelsInBatch(arg0 []*entities.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelsInBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannelsInBatch indicates an expected call of UpdateChannelsInBatch.
func (mr *MockChannelServiceMockRecorder) UpdateChannelsInBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelsInBatch", reflect.TypeOf((*MockChannelService)(nil).UpdateChannelsInBatch), arg0)
}
