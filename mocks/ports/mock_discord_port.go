// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sugar-cat7/vspo-common-api/domain/ports (interfaces: DiscordService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sugar-cat7/vspo-common-api/domain/entities"
)

// MockDiscordService is a mock of DiscordService interface.
type MockDiscordService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordServiceMockRecorder
}

// MockDiscordServiceMockRecorder is the mock recorder for MockDiscordService.
type MockDiscordServiceMockRecorder struct {
	mock *MockDiscordService
}

// NewMockDiscordService creates a new mock instance.
func NewMockDiscordService(ctrl *gomock.Controller) *MockDiscordService {
	mock := &MockDiscordService{ctrl: ctrl}
	mock.recorder = &MockDiscordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordService) EXPECT() *MockDiscordServiceMockRecorder {
	return m.recorder
}

// SendMessages mocks base method.
func (m *MockDiscordService) SendMessages(arg0 entities.Videos, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessages indicates an expected call of SendMessages.
func (mr *MockDiscordServiceMockRecorder) SendMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*MockDiscordService)(nil).SendMessages), arg0, arg1)
}
