// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sugar-cat7/vspo-common-api/infrastructure/firestore (interfaces: FirestoreClient,CollectionRef,DocumentRef,Batch)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "github.com/golang/mock/gomock"
	firestore0 "github.com/sugar-cat7/vspo-common-api/infrastructure/firestore"
)

// MockFirestoreClient is a mock of FirestoreClient interface.
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient.
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance.
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockFirestoreClient) Batch() firestore0.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch")
	ret0, _ := ret[0].(firestore0.Batch)
	return ret0
}

// Batch indicates an expected call of Batch.
func (mr *MockFirestoreClientMockRecorder) Batch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockFirestoreClient)(nil).Batch))
}

// Collection mocks base method.
func (m *MockFirestoreClient) Collection(arg0 string) firestore0.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(firestore0.CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockFirestoreClientMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockFirestoreClient)(nil).Collection), arg0)
}

// Doc mocks base method.
func (m *MockFirestoreClient) Doc(arg0 string) firestore0.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", arg0)
	ret0, _ := ret[0].(firestore0.DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockFirestoreClientMockRecorder) Doc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockFirestoreClient)(nil).Doc), arg0)
}

// MockCollectionRef is a mock of CollectionRef interface.
type MockCollectionRef struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRefMockRecorder
}

// MockCollectionRefMockRecorder is the mock recorder for MockCollectionRef.
type MockCollectionRefMockRecorder struct {
	mock *MockCollectionRef
}

// NewMockCollectionRef creates a new mock instance.
func NewMockCollectionRef(ctrl *gomock.Controller) *MockCollectionRef {
	mock := &MockCollectionRef{ctrl: ctrl}
	mock.recorder = &MockCollectionRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRef) EXPECT() *MockCollectionRefMockRecorder {
	return m.recorder
}

// Doc mocks base method.
func (m *MockCollectionRef) Doc(arg0 string) firestore0.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", arg0)
	ret0, _ := ret[0].(firestore0.DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockCollectionRefMockRecorder) Doc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockCollectionRef)(nil).Doc), arg0)
}

// Documents mocks base method.
func (m *MockCollectionRef) Documents(arg0 context.Context) (*firestore.DocumentIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", arg0)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documents indicates an expected call of Documents.
func (mr *MockCollectionRefMockRecorder) Documents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockCollectionRef)(nil).Documents), arg0)
}

// MockDocumentRef is a mock of DocumentRef interface.
type MockDocumentRef struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRefMockRecorder
}

// MockDocumentRefMockRecorder is the mock recorder for MockDocumentRef.
type MockDocumentRefMockRecorder struct {
	mock *MockDocumentRef
}

// NewMockDocumentRef creates a new mock instance.
func NewMockDocumentRef(ctrl *gomock.Controller) *MockDocumentRef {
	mock := &MockDocumentRef{ctrl: ctrl}
	mock.recorder = &MockDocumentRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRef) EXPECT() *MockDocumentRefMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDocumentRef) Delete(arg0 context.Context, arg1 ...firestore.Precondition) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentRefMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentRef)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockDocumentRef) Get(arg0 context.Context, arg1 ...firestore.DocumentSnapshot) (*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDocumentRefMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentRef)(nil).Get), varargs...)
}

// Set mocks base method.
func (m *MockDocumentRef) Set(arg0 context.Context, arg1 interface{}, arg2 ...firestore.SetOption) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockDocumentRefMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDocumentRef)(nil).Set), varargs...)
}

// Update mocks base method.
func (m *MockDocumentRef) Update(arg0 context.Context, arg1 []firestore.Update, arg2 ...firestore.Precondition) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDocumentRefMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDocumentRef)(nil).Update), varargs...)
}

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockBatch) Commit(arg0 context.Context) ([]*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].([]*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockBatchMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBatch)(nil).Commit), arg0)
}

// Delete mocks base method.
func (m *MockBatch) Delete(arg0 firestore0.DocumentRef, arg1 ...firestore.Precondition) firestore0.Batch {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(firestore0.Batch)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBatchMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatch)(nil).Delete), varargs...)
}

// Set mocks base method.
func (m *MockBatch) Set(arg0 firestore0.DocumentRef, arg1 interface{}, arg2 ...firestore.SetOption) firestore0.Batch {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(firestore0.Batch)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockBatchMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBatch)(nil).Set), varargs...)
}

// Update mocks base method.
func (m *MockBatch) Update(arg0 firestore0.DocumentRef, arg1 []firestore.Update, arg2 ...firestore.Precondition) firestore0.Batch {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(firestore0.Batch)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBatchMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBatch)(nil).Update), varargs...)
}
