// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/sugar-cat7/vspo-common-api/domain/services"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/firestore"
	handlers2 "github.com/sugar-cat7/vspo-common-api/infrastructure/http/handlers/channel"
	handlers3 "github.com/sugar-cat7/vspo-common-api/infrastructure/http/handlers/clip"
	handlers4 "github.com/sugar-cat7/vspo-common-api/infrastructure/http/handlers/cron"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/http/handlers/song"
	usecases2 "github.com/sugar-cat7/vspo-common-api/usecases/channel"
	usecases3 "github.com/sugar-cat7/vspo-common-api/usecases/clip"
	"github.com/sugar-cat7/vspo-common-api/usecases/mappers"
	"github.com/sugar-cat7/vspo-common-api/usecases/song"
)

// Injectors from wire.go:

// InitializeApplication initializes the entire application with all its dependencies using wire.
func InitializeApplication() (*Application, func(), error) {
	firestoreClient, err := firestore.ProvideFirestoreClient()
	if err != nil {
		return nil, nil, err
	}
	songRepository := firestore.NewSongRepository(firestoreClient)
	repositoriesSongRepository := firestore.ProvideSongRepository(firestoreClient, songRepository)
	songService := services.NewSongService(repositoriesSongRepository)
	getAllSongs := usecases.NewGetAllSongs(songService)
	getAllSongsHandler := handlers.NewGetAllSongsHandler(getAllSongs)
	youTubeService, err := services.NewYouTubeService()
	if err != nil {
		return nil, nil, err
	}
	songMapper := mappers.ProvideSongMapper()
	createSong := usecases.NewCreateSong(youTubeService, songService, songMapper)
	createSongHandler := handlers.NewCreateSongHandler(createSong)
	updateSongs := usecases.NewUpdateSongs(youTubeService, songService, songMapper)
	updateSongsHandler := handlers.NewUpdateSongsHandler(updateSongs)
	addNewSong := usecases.NewAddNewSong(youTubeService, songService, songMapper)
	addNewSongHandler := handlers.NewAddNewSongHandler(addNewSong)
	channelRepository := firestore.NewChannelRepository(firestoreClient)
	repositoriesChannelRepository := firestore.ProvideChannelRepository(firestoreClient, channelRepository)
	channelService := services.NewChannelService(repositoriesChannelRepository)
	getChannels := usecases2.NewGetChannels(channelService)
	getChannelsHandler := handlers2.NewGetChannelsHandler(getChannels)
	channelMapper := mappers.ProvideChannelMapper()
	createChannel := usecases2.NewCreateChannel(youTubeService, channelService, channelMapper)
	createChannelHandler := handlers2.NewCreateChannelHandler(createChannel)
	updateChannelsFromYoutube := usecases2.NewUpdateChannelsFromYoutube(youTubeService, channelService, channelMapper)
	updateChannelsFromYoutubeHandler := handlers2.NewUpdateChannelsFromYoutubeHandler(updateChannelsFromYoutube)
	clipRepository := firestore.NewClipRepository(firestoreClient)
	repositoriesClipRepository := firestore.ProvideClipRepository(firestoreClient, clipRepository)
	clipService := services.NewClipService(repositoriesClipRepository)
	clipMapper := mappers.ProvideClipMapper()
	getClipsByPeriod := usecases3.NewGetClipsByPeriod(clipService, clipMapper)
	getClipsByPeriodHandler := handlers3.NewGetClipsByPeriodHandler(getClipsByPeriod)
	updateClipsByPeriod := usecases3.NewUpdateClipsByPeriod(clipService, clipMapper, youTubeService)
	updateClipsHandler := handlers3.NewUpdateClipsHandler(updateClipsByPeriod)
	cronHandler := handlers4.NewCronHandler(updateClipsByPeriod, updateSongs)
	application := NewApplication(getAllSongsHandler, createSongHandler, updateSongsHandler, addNewSongHandler, getChannelsHandler, createChannelHandler, updateChannelsFromYoutubeHandler, getClipsByPeriodHandler, updateClipsHandler, cronHandler)
	return application, func() {
	}, nil
}

// wire.go:

// Application is the main application struct which holds all the dependencies together.
type Application struct {
	GetAllSongsHandler               *handlers.GetAllSongsHandler
	CreateSongHandler                *handlers.CreateSongHandler
	UpdateSongsHandler               *handlers.UpdateSongsHandler
	AddNewSongHandler                *handlers.AddNewSongHandler
	GetChannelsHandler               *handlers2.GetChannelsHandler
	CreateChannelHandler             *handlers2.CreateChannelHandler
	UpdateChannelsFromYoutubeHandler *handlers2.UpdateChannelsFromYoutubeHandler
	GetClipsByPeriodHandler          *handlers3.GetClipsByPeriodHandler
	UpdateClipsHandler               *handlers3.UpdateClipsHandler
	CronHandler                      *handlers4.CronHandler
}

// NewApplication creates a new Application.
func NewApplication(getAllSongsHandler *handlers.GetAllSongsHandler, createSongHandler *handlers.CreateSongHandler, updateSongsHandler *handlers.UpdateSongsHandler, addNewSongHandler *handlers.AddNewSongHandler,
	getChannelsHandler *handlers2.GetChannelsHandler, createChannelHandler *handlers2.CreateChannelHandler, updateChannelsFromYoutubeHandler *handlers2.UpdateChannelsFromYoutubeHandler,
	getClipsByPeriodHandler *handlers3.GetClipsByPeriodHandler, updateClipsHandler *handlers3.UpdateClipsHandler,
	cronHandler *handlers4.CronHandler,
) *Application {
	return &Application{
		GetAllSongsHandler:               getAllSongsHandler,
		CreateSongHandler:                createSongHandler,
		UpdateSongsHandler:               updateSongsHandler,
		AddNewSongHandler:                addNewSongHandler,
		GetChannelsHandler:               getChannelsHandler,
		CreateChannelHandler:             createChannelHandler,
		UpdateChannelsFromYoutubeHandler: updateChannelsFromYoutubeHandler,
		GetClipsByPeriodHandler:          getClipsByPeriodHandler,
		UpdateClipsHandler:               updateClipsHandler,
		CronHandler:                      cronHandler,
	}
}
