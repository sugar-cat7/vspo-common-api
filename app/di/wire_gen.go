// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/sugar-cat7/vspo-common-api/app/http/handlers/songs"
	"github.com/sugar-cat7/vspo-common-api/domain/services"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/firestore"
	"github.com/sugar-cat7/vspo-common-api/infrastructure/youtube"
	"github.com/sugar-cat7/vspo-common-api/usecases/song"
)

// Injectors from wire.go:

// InitializeApplication initializes the entire application with all its dependencies using wire.
func InitializeApplication() (*Application, func(), error) {
	client, err := firestore.ProvideFirestoreClient()
	if err != nil {
		return nil, nil, err
	}
	firestoreClient := firestore.NewFirestoreClientImpl(client)
	songRepository := firestore.NewSongRepository(firestoreClient)
	repositoriesSongRepository := firestore.ProvideSongRepository(client, songRepository)
	songService := services.NewSongService(repositoriesSongRepository)
	getAllSongs := usecases.NewGetAllSongs(songService)
	getAllSongsHandler := handlers.NewGetAllSongsHandler(getAllSongs)
	httpClient := youtube.ProvideHTTPClient()
	youTubeService := services.NewYouTubeService(httpClient)
	createSong := usecases.NewCreateSong(youTubeService, songService)
	createSongHandler := handlers.NewCreateSongHandler(createSong)
	updateSongsFromYoutube := usecases.NewUpdateSongsFromYoutube(youTubeService, songService)
	updateSongsFromYoutubeHandler := handlers.NewUpdateSongsFromYoutubeHandler(updateSongsFromYoutube)
	application := NewApplication(getAllSongsHandler, createSongHandler, updateSongsFromYoutubeHandler)
	return application, func() {
	}, nil
}

// wire.go:

// Application is the main application struct which holds all the dependencies together.
type Application struct {
	GetAllSongsHandler            *handlers.GetAllSongsHandler
	CreateSongHandler             *handlers.CreateSongHandler
	UpdateSongsFromYoutubeHandler *handlers.UpdateSongsFromYoutubeHandler
}

// NewApplication creates a new Application.
func NewApplication(getAllSongsHandler *handlers.GetAllSongsHandler, createSongHandler *handlers.CreateSongHandler, updateSongsFromYoutubeHandler *handlers.UpdateSongsFromYoutubeHandler) *Application {
	return &Application{
		GetAllSongsHandler:            getAllSongsHandler,
		CreateSongHandler:             createSongHandler,
		UpdateSongsFromYoutubeHandler: updateSongsFromYoutubeHandler,
	}
}
