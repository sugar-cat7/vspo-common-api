// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sugar-cat7/vspo-common-api/domain/ports (interfaces: SlackService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlackService is a mock of SlackService interface.
type MockSlackService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackServiceMockRecorder
}

// MockSlackServiceMockRecorder is the mock recorder for MockSlackService.
type MockSlackServiceMockRecorder struct {
	mock *MockSlackService
}

// NewMockSlackService creates a new mock instance.
func NewMockSlackService(ctrl *gomock.Controller) *MockSlackService {
	mock := &MockSlackService{ctrl: ctrl}
	mock.recorder = &MockSlackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackService) EXPECT() *MockSlackServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockSlackService) SendMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSlackServiceMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSlackService)(nil).SendMessage), arg0)
}
